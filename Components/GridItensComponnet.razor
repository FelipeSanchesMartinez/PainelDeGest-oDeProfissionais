@inject IEspecialidadesRepository EspecialidadesRepository


<div class="navbar justify-content-between mb-5">
    <Dropdown Color="DropdownColor.Success">
        <DropdownToggleButton>Filtrar por:</DropdownToggleButton>
        <DropdownMenu>
            <DropdownItem @onclick="()=>FiltrarPorEspecialidade(null)">Todos</DropdownItem>
            <DropdownDivider>Dropdown header</DropdownDivider>
            @if (EspecialidadesDisponiveis.Any())
            {
                foreach (var item in EspecialidadesDisponiveis)
                {
                    <DropdownItem @onclick="() => FiltrarPorEspecialidade(item.Nome)">@item.Nome</DropdownItem>
                }
            }
        </DropdownMenu>
    </Dropdown>


    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
        Novo Profissional
    </button>
</div>


<table class="table">
    <thead>
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Nome</th>
            <th scope="col">Especialidade</th>
            <th scope="col">Tipo do Documento</th>
            <th scope="col">Número do Documento</th>
            <th scope="col">Ações</th>
        </tr>
    </thead>

    <tbody>
        @if (ProfissionaisPaginado.Any() && !ProfissionaisFiltrados.Any())
        {
            foreach (var item in ProfissionaisPaginado.Skip((paginaAtual - 1) * itensPorPagina).Take(itensPorPagina))
            {
                <tr>
                    <th>@item.Id</th>
                    <td>@item.Nome</td>
                    <td>@item.Especialidade</td>
                    <td>@item.TipoDeDocumento</td>
                    <td>@item.NumeroDoDocumento</td>
                    <td>
                        <button type="button" class="btn btn-warning small" @onclick="()=>AbrirModalEditar(item)"><i class="bi bi-pencil-square"></i></button>
                        <button type="button" class="btn btn-danger small" @onclick="()=>AbrirModalDeletar(item)"> <i class="bi bi-trash3-fill"></i></button>
                    </td>
                </tr>
            }
        } else if (ProfissionaisFiltrados.Any())
        {
            foreach (var item in ProfissionaisFiltrados.Skip((paginaAtual - 1) * itensPorPagina).Take(itensPorPagina))
            {
                <tr>
                    <th>@item.Id</th>
                    <td>@item.Nome</td>
                    <td>@item.Especialidade</td>
                    <td>@item.TipoDeDocumento</td>
                    <td>@item.NumeroDoDocumento</td>
                    <td>
                        <button type="button" class="btn btn-warning small" @onclick="()=>AbrirModalEditar(item)"><i class="bi bi-pencil-square"></i></button>
                        <button type="button" class="btn btn-danger small" @onclick="()=>AbrirModalDeletar(item)"> <i class="bi bi-trash3-fill"></i></button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" class="text-center">Não há profissionais registrados para esta especialidade.</td>
            </tr>
        }
    </tbody>
</table>
@if (!ProfissionaisFiltrados.Any())
{
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center ">
            <li class="page-item @(paginaAtual == 1 ? "disabled" : "")">
                <a class="page-link" style="color:black" href="#" @onclick="() => MudarPagina(paginaAtual - 1)">Previous</a>
            </li>
            @for (int i = 1; i <= TotalDePaginas; i++)
            {
                <li class="page-item @(i == paginaAtual ? "active" : "")">
                    <a class="page-link" style="color:black">@i</a>
                </li>
            }
            <li class="page-item @(paginaAtual == TotalDePaginas ? "disabled" : "")">
                <a class="page-link" style="color:black" href="#" @onclick="() => MudarPagina(paginaAtual + 1)">Next</a>
            </li>
        </ul>
    </nav>
}
else
{
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center ">
            <li class="page-item @(paginaAtual == 1 ? "disabled" : "")">
                <a class="page-link" style="color:black" href="#" @onclick="() => MudarPagina(paginaAtual - 1)">Previous</a>
            </li>
            @for (int i = 1; i <= TotalDePaginasFiltrado; i++)
            {
                <li class="page-item @(i == paginaAtual ? "active" : "")">
                    <a class="page-link" style="color:black">@i</a>
                </li>
            }
            <li class="page-item @(paginaAtual == TotalDePaginasFiltrado ? "disabled" : "")">
                <a class="page-link" style="color:black" href="#" @onclick="() => MudarPagina(paginaAtual + 1)">Next</a>
            </li>
        </ul>
    </nav>
}


@code {
    [Parameter]
    public List<Profissional> Profissionais { get; set; }

    [Parameter]
    public EventCallback<Profissional> OnAbrirModalEditar { get; set; }

    [Parameter]
    public EventCallback<Profissional> OnAbrirModalDeletar { get; set; }

    private List<Especialidades> EspecialidadesDisponiveis = new List<Especialidades>();

    private int paginaAtual = 1;
    private int itensPorPagina = 5;


    private List<Profissional> ProfissionaisFiltrados = new List<Profissional>();

    private List<Profissional> ProfissionaisPaginado = new List<Profissional>();

    private int TotalDePaginas => (int)Math.Ceiling(Profissionais.Count / (double)itensPorPagina);
    private int TotalDePaginasFiltrado => (int)Math.Ceiling(ProfissionaisFiltrados.Count / (double)itensPorPagina);


    protected async override Task OnInitializedAsync()
    {
        ProfissionaisPaginado = Profissionais;
        var totasEspecialidades = await EspecialidadesRepository.GetAllAsync();
        if (totasEspecialidades.Any())
        {
            EspecialidadesDisponiveis.AddRange(totasEspecialidades);
        }
    }

    private void MudarPagina(int pagina)
    {
        if (pagina >= 1 && pagina <= TotalDePaginas)
        {
            paginaAtual = pagina;
        }
    }
    private void AbrirModalEditar(Profissional item)
    {
        OnAbrirModalEditar.InvokeAsync(item);
    }
    private void AbrirModalDeletar(Profissional item)
    {
        OnAbrirModalDeletar.InvokeAsync(item);
    }

    private async Task FiltrarPorEspecialidade(string? filtro)
    {
        ProfissionaisPaginado = new List<Profissional>();
        if (string.IsNullOrEmpty(filtro))
        {
            ProfissionaisPaginado = Profissionais; 
        }
        else
        {
            ProfissionaisFiltrados = Profissionais.Where(p => p.Especialidade == filtro).ToList();
        }
        paginaAtual = 1;
        StateHasChanged();
    }
}

